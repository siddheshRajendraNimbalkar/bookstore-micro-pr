// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addProduct = `-- name: AddProduct :one
INSERT INTO products (name, description, price, quantity, image) VALUES ($1, $2, $3, $4, $5) RETURNING id, name, image, price, description, quantity, stars, created_at
`

type AddProductParams struct {
	Name        string  `db:"name" json:"name"`
	Description string  `db:"description" json:"description"`
	Price       float64 `db:"price" json:"price"`
	Quantity    int32   `db:"quantity" json:"quantity"`
	Image       string  `db:"image" json:"image"`
}

func (q *Queries) AddProduct(ctx context.Context, arg AddProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, addProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Quantity,
		arg.Image,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Price,
		&i.Description,
		&i.Quantity,
		&i.Stars,
		&i.CreatedAt,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, image, price, description, quantity, stars, created_at FROM products WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Price,
		&i.Description,
		&i.Quantity,
		&i.Stars,
		&i.CreatedAt,
	)
	return i, err
}
