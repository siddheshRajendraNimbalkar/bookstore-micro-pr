package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"log"

	"github.com/siddheshRajendraNimbalkar/bookstore/gateway/model"
	"github.com/siddheshRajendraNimbalkar/bookstore/gateway/pb"
)

// CreateProduct is the resolver for the CreateProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.CreateProductInput) (*model.Product, error) {
	product := &pb.CreateProductResponse{}

	log.Println("Creating product with input:", input)

	req := &pb.CreateProductRequest{
		Name:        input.Name,
		Image:       input.Image,
		Description: input.Description,
		Price:       float32(input.Price),
		Quantity:    int64(input.Quantity),
		Star:        float32(input.Star),
	}

	log.Println("gRPC request:", req)

	// âœ… Proper gRPC method call
	err := r.ProductClient.Invoke(
		ctx,
		"/pb.ProductService/CreateProduct",
		req,
		product,
	)

	if err != nil {

		log.Printf("gRPC call failed: %v", err)
		log.Println("Response details:", product)
		return nil, fmt.Errorf("gRPC call failed: %v", err)
	}

	return &model.Product{
		ID:          product.Product.ProductId,
		Name:        product.Product.Name,
		Image:       product.Product.Image,
		Description: product.Product.Description,
		Price:       float64(product.Product.Price),
		Quantity:    int(product.Product.Quantity),
		Star:        float64(product.Product.Star),
	}, nil
}

// CreateOrder is the resolver for the CreateOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.CreateOrderInput) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: CreateOrder - CreateOrder"))
}

// GetProduct is the resolver for the getProduct field.
func (r *queryResolver) GetProduct(ctx context.Context) ([]*model.Product, error) {
	panic(fmt.Errorf("not implemented: GetProduct - getProduct"))
}

// GetProductByID is the resolver for the getProductById field.
func (r *queryResolver) GetProductByID(ctx context.Context, id string) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: GetProductByID - getProductById"))
}

// GetOrder is the resolver for the getOrder field.
func (r *queryResolver) GetOrder(ctx context.Context) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: GetOrder - getOrder"))
}

// GetOrderByID is the resolver for the getOrderById field.
func (r *queryResolver) GetOrderByID(ctx context.Context, id string) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: GetOrderByID - getOrderById"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
